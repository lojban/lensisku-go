{
    "swagger": "2.0",
    "info": {
        "description": "API for Lensisku, providing various application functionalities.",
        "title": "Lensisku API",
        "contact": {
            "name": "API Support",
            "email": "admin@lojban.org"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Logs in an existing user and returns access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "loginBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful, tokens provided",
                        "schema": {
                            "$ref": "#/definitions/auth.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or missing fields",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Provides a new access token and refresh token using a valid refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Access Token",
                "parameters": [
                    {
                        "description": "Refresh token details",
                        "name": "refreshBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or missing refresh token",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "registerBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or missing fields",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - User already exists (username or email)",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile information for the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user's profile",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile",
                        "schema": {
                            "$ref": "#/definitions/users.UserProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the profile information (e.g., email, bio) for the currently authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update current user's profile",
                "parameters": [
                    {
                        "description": "User profile data to update",
                        "name": "userProfile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UpdateUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user profile",
                        "schema": {
                            "$ref": "#/definitions/users.UserProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - e.g., email already exists",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperror.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperror.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "A description of the error"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "description": "Can be username or email",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "strongpassword123"
                }
            }
        },
        "auth.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "def50200..."
                }
            }
        },
        "auth.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "strongpassword123"
                },
                "username": {
                    "type": "string",
                    "example": "newuser"
                }
            }
        },
        "auth.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "expires_in": {
                    "type": "integer",
                    "example": 3600
                },
                "refresh_token": {
                    "type": "string",
                    "example": "def50200..."
                },
                "token_type": {
                    "description": "TokenType and ExpiresIn can be kept or removed; for now, let's keep them as they are common.\nIf they cause issues with Rust compatibility, they can be removed.",
                    "type": "string",
                    "example": "Bearer"
                }
            }
        },
        "auth.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.UpdateUserProfileRequest": {
            "description": "Request body for updating user profile",
            "type": "object",
            "properties": {
                "bio": {
                    "description": "The new biography for the user.\nexample: \"Updated bio: Still a Lojban enthusiast, now also learning Klingon.\"",
                    "type": "string"
                },
                "email": {
                    "description": "The new email address for the user.\nexample: \"john.doe.new@example.com\"",
                    "type": "string"
                }
            }
        },
        "users.UserProfileResponse": {
            "description": "User profile information",
            "type": "object",
            "properties": {
                "bio": {
                    "description": "A short biography of the user\nexample: \"Lojban enthusiast and software developer.\"",
                    "type": "string"
                },
                "created_at": {
                    "description": "The time the user was created\nexample: \"2023-01-15T10:30:00Z\"",
                    "type": "string"
                },
                "email": {
                    "description": "The email address of the user\nexample: \"johndoe@example.com\"",
                    "type": "string"
                },
                "id": {
                    "description": "The ID of the user\nexample: 1",
                    "type": "integer"
                },
                "username": {
                    "description": "The username of the user\nexample: \"johndoe\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type 'Bearer YOUR_JWT_TOKEN' to authorize",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}